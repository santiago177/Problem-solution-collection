#include <iostream>
#include <map>
#include <set>
#include <utility>
#include <queue>

using namespace std;

pair<long long, long long> ret(char c, pair<long long, long long> t)
{
    if(c == 'S')
	return make_pair(t.first, t.second-1);
    if(c == 'N')
	return make_pair(t.first, t.second+1);
    if(c == 'E')
	return make_pair(t.first+1, t.second);
    return make_pair(t.first-1, t.second);	
}


int main()
{
    long long t, sx,sy, ex, ey, moves;
    bool reachable = false;
    string dir;
    cin>>t>>sx>>sy>>ex>>ey;
    cin>>dir;
    set<pair<int, int> > visited;
    queue<pair<pair<long long, long long>, int> > q;
    q.push(make_pair(make_pair(sx, sy), 0)); 
    while(!q.empty())
    {
	pair<long long, long long> p = q.front().first;
	int ctime = q.front().second;
	if(p.first == ex && p.second == ey)
	{
	    moves = q.front().second;
	    reachable = true;
	    break;
	}
	q.pop();
	if(ctime >= t)
	   continue;
//	cout<<"time = "<<ctime<<endl;
//	cout<<"current = "<<p.first<<" "<<p.second<<endl;
	pair<long long, long long> t = ret(dir[ctime], p);
	if(visited.find(t) == visited.end())
	{
	    q.push(make_pair(t, ctime+1));
	    visited.insert(t);
	}
//	cout<<"inserted t = "<<t.first<<" "<<t.second<<" "<<ctime+1<<endl;
	q.push(make_pair(p, ctime+1));	
//	cout<<"inserted p = "<<p.first<<" "<<p.second<<" "<<ctime+1<<endl;
    }
    if(reachable)
	cout<<moves;
    else
	cout<<-1;
    return 0;
}
